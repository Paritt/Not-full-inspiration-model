# -*- coding: utf-8 -*-
"""HM Rib earn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14pCUzbhnZc7XhDCKvEv9sJXpmS-WwB3L

#**Human Performance Test**
"""

from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
import glob
import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""##Function"""

def load_mask(path, n_classes=3, SIZE_Y=512, SIZE_X=512):
  print('Loading in progress...')
  masks_path = []
  masks = []
  for directory_path in glob.glob(path):
    for mask_path in glob.glob(os.path.join(directory_path, "*.tiff")):
        masks_path.append(mask_path)
  masks_path.sort()
  for mask_path in masks_path:
        mask = cv2.imread(mask_path, 0) #Read in grayscale mode (0)       
        mask = cv2.resize(mask, (SIZE_Y, SIZE_X), interpolation = cv2.INTER_NEAREST)  #Otherwise ground truth changes due to interpolation
        masks.append(mask)
  masks = np.array(masks) #Change it to numpy array
  #Encode
  labelencoder = LabelEncoder()
  n, h, w = masks.shape
  masks_reshaped = masks.reshape(-1,1)
  masks_reshaped_encoded = labelencoder.fit_transform(masks_reshaped)
  masks_encoded_original_shape = masks_reshaped_encoded.reshape(n, h, w)
  #Expand dimension
  masks_input = np.expand_dims(masks_encoded_original_shape, axis = 3)
  #One hot encode
  onehot_mask = to_categorical(masks_input,num_classes=n_classes)
  print('Done!')
  print(f'Mask shape: {onehot_mask.shape}')
  return onehot_mask

def dice_cal(y_true, y_pred):
    intersection = np.sum(np.logical_and(y_true, y_pred).astype(float))
    if (np.sum(y_true)==0) and (np.sum(y_pred)==0):
        return 1
    return (2*intersection) / (np.sum(y_true) + np.sum(y_pred))

def Overall_Dice(human_mask, gt_mask, class_dict, n_classes=3):
  dice_class_0 = []
  dice_class_1 = []
  dice_class_2 = []
  for img_num in range(len(human_mask)):
    for i in range(n_classes):
      dice = dice_cal(gt_mask[img_num][:,:,i], human_mask[img_num][:,:,i])
      if i == 0:
        dice_class_0.append(dice)
      elif i == 1:
        dice_class_1.append(dice)
      elif i == 2:
        dice_class_2.append(dice)
  print('\033[1mOverall Dice Score\033[0m')
  mean_dice_class_0 = np.sum(dice_class_0)/len(human_mask)
  mean_dice_class_1 = np.sum(dice_class_1)/len(human_mask)
  mean_dice_class_2 = np.sum(dice_class_2)/len(human_mask)
  overall_dice = (mean_dice_class_0 + mean_dice_class_1 + mean_dice_class_2)/n_classes
  print(f'{class_dict[0]}: {round(mean_dice_class_0,3)}')
  print(f'{class_dict[1]}: {round(mean_dice_class_1,3)}')
  print(f'{class_dict[2]}: {round(mean_dice_class_2,3)}')
  print(f'All classes: {round(overall_dice,3)}\n')

def majority(h1,h2,h3,img_num=0):
  for i in range(3):
    if i == 0:
      h1orh2 = np.logical_or(h1[img_num][:,:,i], h2[img_num][:,:,i]).astype(float)
      h1orh3 = np.logical_or(h1[img_num][:,:,i], h3[img_num][:,:,i]).astype(float)
      h2orh3 = np.logical_or(h2[img_num][:,:,i], h3[img_num][:,:,i]).astype(float)
      and1 = np.logical_and(h1orh2, h1orh3).astype(float)
      gt = np.logical_and(h2orh3, and1).astype(float)
    else:
      h1orh2 = np.logical_or(h1[img_num][:,:,i], h2[img_num][:,:,i]).astype(float)
      h1orh3 = np.logical_or(h1[img_num][:,:,i], h3[img_num][:,:,i]).astype(float)
      h2orh3 = np.logical_or(h2[img_num][:,:,i], h3[img_num][:,:,i]).astype(float)
      and1 = np.logical_and(h1orh2, h1orh3).astype(float)
      and2 = np.logical_and(h2orh3, and1).astype(float)
      gt = np.dstack((gt, and2))
  return gt

def create_gt(h1,h2,h3):
  print('Processing...')
  for img_num in range(len(h1)):
    if img_num == 0:
      gt = majority(h1,h2,h3,img_num=img_num)
    elif img_num == 1:
      gt_inter = majority(h1,h2,h3,img_num=img_num)
      gt = np.stack((gt, gt_inter))
    else:
      gt_inter = majority(h1,h2,h3,img_num=img_num)
      gt_inter = np.expand_dims(gt_inter, axis = 0)
      gt = np.concatenate((gt, gt_inter))
  print('Done!')
  print(f'GT shape: {gt.shape}')
  return gt

"""#Action

##Create GT

โหลด mask จาก 3 คน
"""

h1_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/MASK_GT_TEST/ไม่แยกFULL_NOTFULL/mask by earn/Rib'
h2_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/MASK_GT_TEST/ไม่แยกFULL_NOTFULL/mask by myu/Rib'
h3_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/MASK_GT_TEST/ไม่แยกFULL_NOTFULL/mask by boo/Rib'

h1 = load_mask(h1_path)
h2 = load_mask(h2_path)
h3 = load_mask(h3_path)

"""สร้าง GT"""

gt = create_gt(h1,h2,h3)

"""ดู GT ที่สร้างเทียบกับ 3 คน"""

for img_num in range(5):
  plt.figure(figsize=(20, 50), dpi=80)
  plt.subplot(141); plt.imshow(gt[img_num]); plt.title('GT')
  plt.subplot(142); plt.imshow(h1[img_num]); plt.title('h1')
  plt.subplot(143); plt.imshow(h2[img_num]); plt.title('h2')
  plt.subplot(144); plt.imshow(h3[img_num]); plt.title('h3')

"""##Human Test

โหลด Human mask ที่จะทดสอบ
"""

human_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/HM_DATA/mask by piyanat/Rib'

human_mask = load_mask(path=human_path)

"""ดู Class"""

n_classes = 3
for i in range(n_classes):
  plt.figure(figsize=(3,3))
  plt.imshow(gt[0][:,:,i], cmap='gray')
  plt.title(i)

class_dict = {0:'BG', 1:'Lt_rib', 2:'Rt_rib'}

"""TEST!!"""

Overall_Dice(human_mask, gt, class_dict=class_dict)

"""#Old_code

* ใส่ Path ของ Human กับ GT (เป็น Path ไปที่ folder ที่ข้างในมีไฟล์ .tiff)
"""

human_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/TEST200 by boo'
gt_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/TEST200 by myu'

"""* Load Human mask


"""

human_mask = load_mask(path=human_path)

"""* Load GT mask"""

gt_mask = load_mask(path=gt_path)

"""* ดูว่าเลขอะไรเป็น Class อะไร"""

n_classes = 3
for i in range(n_classes):
  plt.figure(figsize=(3,3))
  plt.imshow(gt_mask[0][:,:,i], cmap='gray')
  plt.title(i)

"""* สร้าง Class dict ตามที่เห็น"""

class_dict = {0:'BG', 1:'Lt_rib', 2:'Rt_rib'}

"""* คำนวณ Dice score"""

Overall_Dice(human_mask, gt_mask, class_dict=class_dict)