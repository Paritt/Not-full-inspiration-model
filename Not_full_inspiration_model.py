# -*- coding: utf-8 -*-
"""85.698 Full inspiration Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZoBNfFR5jjiqiesWWqXCT2wfc0vqrCBP

#  Not Full inspiration Demo
"""

pip install -U segmentation-models

import tensorflow as tf
import segmentation_models as sm
import glob
import cv2
import os
from skimage import io, color
import numpy as np
from matplotlib import pyplot as plt
import keras 
import datetime

from sklearn.preprocessing import LabelEncoder
from keras.utils.all_utils import normalize 
from keras.metrics import MeanIoU
sm.set_framework('tf.keras')
sm.framework()

from google.colab import drive
drive.mount('/content/drive')

"""##Load Model"""

rib_model = tf.keras.models.load_model('/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/SAVED_MODEL/ribmodel_resnet50_2450_e100_b4_lr0.0001.hdf5', compile=False)

lung_model = tf.keras.models.load_model('/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/SAVED_MODEL/lungmodel_resnet50_1180_e100_b4_lr0.0001.hdf5', compile=False)

"""##Define function"""

def predict_on_image(img_path,model,BACKBONE):
  preprocess_input = sm.get_preprocessing(BACKBONE)
  img = cv2.imread(img_path, 1) #Read in BGR mode (1)      
  img = cv2.resize(img, (SIZE_Y, SIZE_X))
  img_input = np.expand_dims(img, 0)
  img_input = preprocess_input(img_input)
  y_pred = model.predict(img_input)
  y_pred_argmax = np.argmax(y_pred, axis=3)[0,:,:]
  Overlay = color.label2rgb(y_pred_argmax,img,colors=[(100,0,0),(255,255,0),(0,0,255)],alpha=0.01, bg_label=0, bg_color=None)
  plt.figure(figsize=(12, 8))
  plt.subplot(131)
  plt.title('Image')
  plt.imshow(img)
  plt.axis('off')
  plt.subplot(132)
  plt.title('Prediction')
  plt.imshow(y_pred_argmax)
  plt.axis('off')
  plt.subplot(133)
  plt.title('Overlay')
  plt.imshow(Overlay)
  plt.axis('off')

def predict_on_image_unit(img_path,rib_model,lung_model,BACKBONE):
  preprocess_input = sm.get_preprocessing(BACKBONE)
  img = cv2.imread(img_path, 1) #Read in BGR mode (1)      
  img = cv2.resize(img, (SIZE_Y, SIZE_X))
  img_input = np.expand_dims(img, 0)
  img_input = preprocess_input(img_input)
  r_y_pred = rib_model.predict(img_input)
  r_y_pred_argmax = np.argmax(r_y_pred, axis=3)[0,:,:]
  l_y_pred = lung_model.predict(img_input)
  l_y_pred_argmax = np.argmax(l_y_pred, axis=3)[0,:,:]
  r_l_y_pred_argmax = (3*r_y_pred_argmax) + (l_y_pred_argmax)
  Unite = color.label2rgb(r_l_y_pred_argmax,img,colors=[(0,0,100),(0,0,100),(100,0,0),(0,100,0),(100,0,0),(0,100,0)],alpha=0.005, bg_label=0, bg_color=None)
  plt.figure(figsize=(12, 8))
  plt.subplot(121)
  plt.title('Image')
  plt.imshow(img)
  plt.axis('off')
  plt.subplot(122)
  plt.title('Segment')
  plt.imshow(Unite)
  plt.axis('off')

def predict_on_image_unit_count(img_path,rib_model,lung_model,BACKBONE):
  preprocess_input = sm.get_preprocessing(BACKBONE)
  img = cv2.imread(img_path, 1) #Read in BGR mode (1)      
  img = cv2.resize(img, (SIZE_Y, SIZE_X))
  img_input = np.expand_dims(img, 0)
  img_input = preprocess_input(img_input)
  #Predict
  r_y_pred = rib_model.predict(img_input)
  r_y_pred_argmax = np.argmax(r_y_pred, axis=3)[0,:,:]
  l_y_pred = lung_model.predict(img_input)
  l_y_pred_argmax = np.argmax(l_y_pred, axis=3)[0,:,:]
  #Overlay
  l_y_pred_argmax[l_y_pred_argmax>0] = 1
  r_y_pred_argmax[r_y_pred_argmax>0] = 2
  r_l_y_pred_argmax = r_y_pred_argmax + l_y_pred_argmax
  overlay = color.label2rgb(r_l_y_pred_argmax,img,colors=[(0,0,100),(100,0,0),(0,100,0)],alpha=0.005, bg_label=0, bg_color=None)
  #Calculate
  union = np.count_nonzero(r_l_y_pred_argmax == 2) + np.count_nonzero(r_l_y_pred_argmax == 3)
  intersec = np.count_nonzero(r_l_y_pred_argmax == 3)
  iou = intersec/union * 100
  #Display
  plt.figure(figsize=(12, 8))
  plt.subplot(121)
  plt.title('Image')
  plt.imshow(img)
  plt.axis('off')
  plt.subplot(122)
  plt.title(f'IoU of Rib 9 in lung is {iou:.2f}%')
  plt.imshow(overlay)
  plt.axis('off')
  #Result
  if iou > cutoff:
    print(f'Pass: {iou:.2f}%')
  else:
    print(f'Not full inspiration: {iou:.2f}%')

def predict_on_image_unit_count_nodis(img_path,rib_model,lung_model,BACKBONE,cutoff):
  preprocess_input = sm.get_preprocessing(BACKBONE)
  img = cv2.imread(img_path, 1) #Read in BGR mode (1)      
  img = cv2.resize(img, (SIZE_Y, SIZE_X))
  img_input = np.expand_dims(img, 0)
  img_input = preprocess_input(img_input)
  #Predict
  r_y_pred = rib_model.predict(img_input)
  r_y_pred_argmax = np.argmax(r_y_pred, axis=3)[0,:,:]
  l_y_pred = lung_model.predict(img_input)
  l_y_pred_argmax = np.argmax(l_y_pred, axis=3)[0,:,:]
  #Overlay
  l_y_pred_argmax[l_y_pred_argmax>0] = 1
  r_y_pred_argmax[r_y_pred_argmax>0] = 2
  r_l_y_pred_argmax = r_y_pred_argmax + l_y_pred_argmax
  overlay = color.label2rgb(r_l_y_pred_argmax,img,colors=[(0,0,100),(100,0,0),(0,100,0)],alpha=0.005, bg_label=0, bg_color=None)
  #Calculate
  union = np.count_nonzero(r_l_y_pred_argmax == 2) + np.count_nonzero(r_l_y_pred_argmax == 3)
  intersec = np.count_nonzero(r_l_y_pred_argmax == 3)
  rol = intersec/union * 100
  #Result
  if rol > cutoff:
    print(f'Pass: {rol:.2f}%')
  else:
    print(f'Not full inspiration: {rol:.2f}%')

SIZE_X = 512 
SIZE_Y = 512
n_classes = 3
cutoff = 85.698

"""##Train image"""

img_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/RIB_UNET_1/Train/image/augmented_image_1.jpeg'
predict_on_image_unit_count(img_path,rib_model,lung_model, BACKBONE='resnet50')

"""##Test image"""

img_path = '/content/drive/Shareddrives/CXR_Project/Data/png_for_move/Normal/Not_Erase/N_batch1_134.png'
predict_on_image_unit_count(img_path,rib_model,lung_model, BACKBONE='resnet50')

"""## Multiple Image"""

test_path = '/content/drive/Shareddrives/CXR_Project/Code/Colab_Notebook/Full Inspired/NEW_MODEL_UNET/IMAGE_TEST_200'
test_image_path = []
for image_path in glob.glob(test_path):
  for n in glob.glob(os.path.join(image_path, "*.png")):
    test_image_path.append(n)
test_image_path.sort()
for i in range(len(test_image_path)):
  print(test_image_path[i][-7:])
  predict_on_image_unit_count_nodis(test_image_path[i],rib_model,lung_model,BACKBONE='resnet50',cutoff=cutoff)